{"componentChunkName":"component---src-templates-blog-post-js","path":"/gdarchive/9","webpackCompilationHash":"693ae2210e6ed9f2aeb9","result":{"data":{"markdownRemark":{"html":"<p>I think every programmer must have some bit of code they wrote that\nthey absolutely hate. Maybe it's something that's brute force where it\ndoesn't need to be. Maybe it's a block of code that's been copied and\npasted a few more times than is advisable. Sure, it works. It's\nperfectly <em>functional</em>.  But you know it's in your codebase,\nlurking. It's waiting for the perfect time to strike, when it can rear\nup and bite you in the ass at the worst possible moment. Of course,\nyou didn't <em>want</em> to write it that way. You'd rather have spent a few\ndays pondering over the most elegant way to express yourself. There\nwasn't time, though. Anyway, this is good enough. For now. You'll come\nback to it later.</p>\n<p>I think this would make a great interview question (though I've never\nheard of anyone asking it): \"What's the worst piece of code you ever\nwrote?\" First, you'd get to see their ability to spot shortcomings in\ntheir own work, which is always a valuable skill. Second, it will give\nyou some insight into what aspects of good code they value most. Is\nthe source of their discomfort something like poor modularization?\nMaybe they can't abide code that isn't properly indented. If something\ntrivial is their biggest grief, perhaps they're not worth hiring. If\nthey can't think of <em>any</em> of their own code that they hate, they're\neither a phenomenal programmer, or they just haven't given it much\nthought, probably the latter.</p>\n<p>My own current source of shame is a particularly atrocious rats' nest\nof conditionals that determine what gets displayed when someone views\nan debate on GreaterDebater. The debate itself doesn't change of\ncourse, but the options available to act on it depend highly on who's\nlooking at it. The rules go like this:</p>\n<ol>\n<li>If the user isn't logged in, and the debate is still ongoing tell them they should log in if they want to vote.</li>\n<li>If the user is logged in, and isn't one of the people in the debate, and the debate hasn't ended, and this user hasn't voted yet, give them the option to vote.</li>\n<li>If all of the above is true except the user has already voted, showthem the current tally of votes with the option to change their vote.</li>\n<li>If the debate is over, always show the outcome and the vote tally.</li>\n<li>If the debate is ongoing and the user viewing it is the user whose turn it is, show them their options for replying.</li>\n<li>If 5 is true but they haven't yet accepted the challenge to the debate, then show them the options to accept or decline.</li>\n<li>If 5 is true but their opponent has offered a draw, then show the options to accept or decline the draw</li>\n<li>If the user is a participant in the debate and it's <strong>not</strong> their turn, just show the debate so far without any actions.</li>\n</ol>\n<p>Phew. All that is realized as the following code.</p>\n<pre><code>if arg.status in range(0,3):\n    # The argument hasn't ended\n    current = True\n\nif current and (request.user.is_authenticated() == False or request.user == arg.whos_up(invert=1)):\n    # The viewer is either not logged in or a participant and it's not his turn\n    # Don't show any controls\n    show_arg_actions = False\nelse:\n    show_arg_actions = True\n\nif request.user == arg.defendant and arg.status == 0:\n    # defendant hasn't accepted or declined the challenge yet\n    # and is viewing the argument, show the options\n    # to accept or decline the argument\n    new_arg = True\n\nif current and request.user == arg.whos_up() and arg.draw_set.all():\n    # A draw has been proposed and the recipient is viewing the argument\n    # show the option to decline or accept the draw\n    show_draw = True\n    \nif current and new_arg == False and not arg.draw_set.all() and request.user == arg.whos_up():\n    # No draw is pending, the person viewing the argument \n    # is a participant and it's his turn show the options\n    # to respond\n    show_actions = True\n\nif current and request.user.is_authenticated() and not request.user in [arg.plaintiff, arg.defendant]:\n    # The person viewing the argument is a registered user\n    # and not a participant, show the voting box\n    show_votes = True\n\nreturn render_to_response(\"items/arg_detail.html\",\n                          {'object': arg,\n                           'incite': arg.incite,\n                           'comments': arg.argcomment_set.order_by('pub_date'),\n                           'new_arg': new_arg,\n                           'voted_for': voted_for, \n                           'last_c': last_c,\n                           'current': current,\n                           'pvotes': votes.filter(voted_for=\"P\").count(),\n                           'dvotes': votes.filter(voted_for=\"D\").count(), \n                           'show_actions': show_actions,\n                           'show_votes': show_votes,\n                           'show_arg_actions': show_arg_actions,\n                           'show_draw': show_draw\n                           },\n                          context_instance=RequestContext(request))\n</code></pre>\n<p>This is actually an improvement from the first attempt. The show_*\nvariables are in turn evaluted in <strong>another</strong> conglomeration of <em>IF</em>\ntags in the template. Suffice to say, the template is not very\ndesigner-friendly.</p>\n<pre><code>{% if show_arg_actions %}\n&#x3C;div id=\"arg_actions\">\n  {% if current %}\n\n  {% if new_arg %}\n  &#x3C;!--   The argument has been proposed but not accepted or declined, the defendant is viewing the page -->\n  &#x3C;div class=\"arg_query arg_responses\" id=\"arg_responses\">\n    Begin this debate?&#x3C;br />\n    &#x3C;ul class=\"flat-list\">\n      &#x3C;li>&#x3C;a href=\"#\" onclick=\"respond_challenge({{ object.id}}, {{ request.user.id }}, 0); return false;\">Accept&#x3C;/a>&#x3C;/li>\n      &#x3C;li>&#x3C;a href=\"#\" onclick=\"respond_challenge({{ object.id}}, {{ request.user.id }}, 1); return false;\">Decline&#x3C;/a>&#x3C;/li>\n    &#x3C;/ul>\n  &#x3C;/div>\n  {% endif %}\n\n  {% if show_draw %}\n  &#x3C;!-- A draw has been proposed, the user viewing the page is currently up in the argument -->\n  &#x3C;div class=\"arg_responses arg_query\" id=\"draw_query\">\n    &#x3C;p>\n      A draw has been offered\n    &#x3C;/p>\n    &#x3C;a class=\"menu\" href=\"#\" onclick=\"respond_draw({{ object.id }}, {{ request.user.id }}, 0); return false;\">Accept&#x3C;/a> |\n    &#x3C;a class=\"menu\" href=\"#\" onclick=\"respond_draw({{ object.id }}, {{ request.user.id }}, 1); return false;\">Decline&#x3C;/a>\n  &#x3C;/div>\n  {% endif %}\n  \n  {% if show_actions %}\n  {% include \"items/turn_actions.html\" %}  \n  {% endif %}\n\n  {% if show_votes %}\n  &#x3C;div id=\"vote\" class=\"arg_responses\">\n    {% if voted_for %}\n\n    {% include \"items/vote_div.html\" %} \n    {% else %}    \n    &#x3C;p>\n      Who's winning? Cast your vote below.\n    &#x3C;/p>\n    &#x3C;a class=\"menu\" href='#' onclick=\"vote({{ object.id }}, {{ request.user.id }}, 'P'); return false;\">Vote for {{ object.plaintiff.username}}&#x3C;/a> |\n    &#x3C;a class=\"menu\" href='#' onclick=\"vote({{ object.id }}, {{ request.user.id }}, 'D'); return false;\">Vote for {{ object.defendant.username}}&#x3C;/a>\n    {% endif %}\n  &#x3C;/div>\n  {% endif %}\n\n  {% else %}\n  &#x3C;div id=\"vote\" class=\"arg_responses\">\n    {% include \"items/vote_div.html\" %}\n  &#x3C;/div>\n  {% endif %}\n&#x3C;/div>\n\n{% else %}\n{% if not request.user.is_authenticated %}\n&#x3C;div id=\"arg_actions\">\n  &#x3C;div class=\"arg_responses\">\n    &#x3C;a href=\"/users/login?next={{ request.path }}\">Log in or register&#x3C;/a> to cast your vote for the greater debater!\n  &#x3C;/div>\n&#x3C;/div>\n{% endif %}\n{% endif %}\n</code></pre>\n<p>What bothers me the most about this strategy is how the logic is split\nup between the view and the template. It should really be in one or\nthe other, ideally it will be in the view in keeping with the Django\npractice of having as little logic in the template as possible. I can\nremove all of the conditionals from the template by breaking out each\nendpoint into a small template of its own. By choosing the appropriate\ntemplate in the view, we can pass the rendered HTML to the main debate\ntemplate directly, thus removing all of the conditionals from the\ntemplate. This greatly simplifies the template. In fact, the entire\nmess of template conditionals above can be replaced with a single\nline:</p>\n<pre><code>{{ arg_actions }}\n</code></pre>\n<p>The view will pass on the rendered HTML as the arg_actions variable.</p>\n<p>Of course, all of this complexity has to go somewhere. In this case\nit's being shoved into the view. At least Python is better equipped to\nhandle it than the Django templating language. I'm still not entirely\nsure this is the best way to handle this situation, but I am glad the\ntemplate is cleaned up. The code in the view now looks like this:</p>\n<pre><code>if arg.status in range(0,3):\n    if request.user.is_authenticated():\n        if request.user == arg.whos_up():\n            if arg.status == 0:\n                # The challenge has been proposed but not accepted\n                argt=loader.get_template(\"items/arg_new_respond.html\")\n                argc = Context({'object': arg,\n                                'request': request})\n                arg_actions = argt.render(argc)\n            elif arg.draw_set.all():\n                # A draw has been offered\n                argt=loader.get_template(\"items/draw_actions.html\")\n                argc = Context({'object': arg,\n                                'request': request})\n                arg_actions = argt.render(argc)\n            else:\n                # normal turn\n                argt=loader.get_template(\"items/turn_actions.html\")\n                argc = Context({'object': arg,\n                                'last_c': last_c,\n                                'user': request.user})\n                arg_actions = argt.render(argc)\n        elif request.user == arg.whos_up(invert=1):\n            # The user is a participant, but it's not his turn\n            arg_actions = ''\n        else:\n            # The user is not a participant in this debate\n            if voted_for:\n    # The user has already cast a vote\n                argt = loader.get_template(\"items/vote_tally.html\")\n                argc = Context({'pvotes': votes.filter(voted_for='P').count(),\n                                'dvotes': votes.filter(voted_for='D').count(),\n                                'object': arg,\n                                'current': True,\n                                'voted_for': voted_for\n                                })\n                arg_actions = argt.render(argc)    \n            else:\n    # The user hasn't voted yet\n                argt = loader.get_template(\"items/vote_div.html\")\n                argc = Context({'object': arg,\n                                'request': request})\n                arg_actions = argt.render(argc)\n    else:\n        # debate is in progress, tell user to log in to vote\n        argt = loader.get_template(\"items/arg_login.html\")\n        argc = Context({'request': request})\n        arg_actions = argt.render(argc)    \nelse: \n    # debate has ended, show the final vote tally\n    argt = loader.get_template(\"items/vote_tally.html\")\n    argc = Context({'pvotes': votes.filter(voted_for='P').count(),\n                    'dvotes': votes.filter(voted_for='D').count(),\n                    'object': arg,\n                    'current': False,\n                    'voted_for': voted_for\n                    })\n    arg_actions = argt.render(argc)    \n\nreturn render_to_response(\"items/arg_detail.html\",\n                          {'object': arg,\n                           'incite': arg.incite,\n                           'comments': arg.argcomment_set.order_by('pub_date'),\n                           'last_c': last_c,\n                           'arg_actions': arg_actions\n                           },\n                          context_instance=RequestContext(request))\n              \n</code></pre>\n<p>So, that's how my most hated code got transformed into perhaps my\nsecond-most hated code. I still feel like the deeply nested if\nstatements here are a <a\nhref=\"http://www.amazon.com/gp/product/0201485672?ie=UTF8&tag=greater0c-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0201485672\">code\nsmell</a><img src=\"http://www.assoc-amazon.com/e/ir?t=greater0c-20&amp;l=as2&amp;o=1&amp;a=0201485672\" width=\"1\" height=\"1\" border=\"0\" alt style=\"border:none !important;\nmargin:0px !important;\"> that indicate there's a better way to\nhandle this. I'm just not quite sure what it is yet.</p>\n<p><em>Originally published 2010-03-15 06:33:39</em></p>","frontmatter":{"date":"2010-03-15","path":"/gdarchive/9","title":"Your most hated code"}},"site":{"siteMetadata":{"title":"KotSF"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}